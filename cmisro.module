<?php
/**
 * @copyright 2014 City of Bloomington, Indiana
 * @license http://www.gnu.org/licenses/agpl.txt GNU/AGPL, see LICENSE.txt
 * @author Cliff Ingham <inghamn@bloomington.in.gov>
 *
 * This module is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This module is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
include __DIR__.'/library/cmis_service.php';

function cmisro_admin_form()
{
	return system_settings_form([
		'cmisro_repositoryId' => [
			'#type'          => 'textfield',
			'#default_value' => variable_get('cmisro_repositoryId'),
			'#title'         => 'CMIS Repository ID',
			'#description'   => 'The ID of your CMIS repository.',
			'#required'      => true
		],
		'cmisro_url' => [
			'#type'          => 'textfield',
			'#default_value' => variable_get('cmisro_url'),
			'#title'         => 'CMIS Repository URL',
			'#description'   => 'Your CMIS 1.1 browser binding repository URL.  This should be the URL to the JSON interface',
			'#required'      => true
		],
		'cmisro_username' => [
			'#type'          => 'textfield',
			'#default_value' => variable_get('cmisro_username'),
			'#title'         => 'CMIS Username',
			'#description'   => 'A username that should have read-only access to your CMIS server',
			'#required'      => true
		],
		'cmisro_password' => [
			'#type'          => 'textfield',
			'#default_value' => variable_get('cmisro_password'),
			'#title'         => 'CMIS Password',
			'#description'   => 'The password for the read-only account on your CMIS server',
			'#required'      => true
		]
	]);
}

/**
 * Verifies the connection to CKAN
 *
 * @implements hook_admin_validate()
 */
function cmisro_admin_form_validate($form, &$form_state)
{
	if (   !empty($form_state['values']['cmisro_url'])
		&& !empty($form_state['values']['cmisro_username'])
		&& !empty($form_state['values']['cmisro_password'])
		&& !empty($form_state['values']['cmisro_repositoryId'])) {
		try {
			$service = new CMISService(
				$form_state['values']['cmisro_url'],
				$form_state['values']['cmisro_username'],
				$form_state['values']['cmisro_password'],
				$form_state['values']['cmisro_repositoryId']
			);
		}
		catch (Exception $e) {
			form_set_error('cmisro_url', 'Cannot connect to CMIS server.  Make sure the URL is valid.');
		}
	}
}

function cmisro_menu()
{
	return [
		'admin/config/services/cmisro' => [
			'title'           => 'CMIS settings',
			'description'     => 'Settings for the read-only CMIS module',
			'page callback'   => 'drupal_get_form',
			'page arguments'  => ['cmisro_admin_form'],
			'access arguments'=> ['administer site configuration'],
			'type'            => MENU_NORMAL_ITEM
		],
		'cmisro/download' => [
			'page callback'    => '_cmisro_download',
			'access arguments' => ['access content']
		]
	];
}

function cmisro_field_info()
{
	return [
		'cmisro' => [
			'label'             => 'CMIS Reference',
			'description'       => 'A reference to one or more documents in the CMIS server',
			'default_widget'    => 'cmisro_chooser',
			'default_formatter' => 'cmisro_formatter'
		]
	];
}

function cmisro_field_widget_info()
{
	return [
		'cmisro_chooser' => [
			'label'       => 'CMIS Reference',
			'field types' => ['cmisro']
		]
	];
}

function cmisro_field_widget_form(&$form, &$form_state, &$field, &$instance, &$langcode, &$items, &$delta, &$element)
{
	if ($instance['widget']['type'] == 'cmisro_chooser') {
		$element['reference'] = [
			'#type'          => 'textfield',
            '#title'         => isset($instance['label'])        ? $instance['label']       : 'CMIS Reference',
			'#default_value' => isset($items[$delta])            ? $items[$delta]           : null,
            '#description'   => !empty($instance['description']) ? $instance['description'] : null
		];
	}
	return $element;
}

/**
 * Validate user's CMIS reference
 *
 * Users can enter a CMIS reference in various ways:
 * id:    753026c2-1d1e-40df-bf5b-847f5d23c1df
 * path:  /Sites/bloomington-arts-commission/documentLibrary/Agendas
 * query: select id from cmis:document where ...
 *
 * @implements hook_field_validate()
 */
function cmisro_field_validate($entity_type, $entity, $field, $instance, $lang, &$items, &$errors)
{
	foreach ($items as $delta=>$item) {
		if (!empty($item['reference'])) {
			$getter = '_cmisro_get'.ucfirst(_cmisro_referenceType($item['reference']));
			try {
				$o = $getter($item['reference']);
			}
			catch (Exception $e) {
				$errors[$field['field_name']][$lang][$delta][] = [
					'error'   => 'unknownAttachment',
					'message' => "$instance[label]: {$e->getMessage()}"
				];
			}
		}
	}
}

function cmisro_field_is_empty($item, $field)
{
	if ($field['type'] == 'cmisro') {
		return empty($item['reference']);
	}
}

function cmisro_field_formatter_info()
{
	return [
		'cmisro_formatter' => [
			'label'       => t('Default'),
			'field types' => ['cmisro']
		]
	];
}

function cmisro_field_formatter_view($entity_type, $entity, $field, $instance, $lang, $items, $display)
{
	$element = [];
	switch ($display['type']) {
		case 'cmisro_formatter':
				// Look up the item reference in the CMIS server
				#$value = $item['reference'];
			foreach ($items as $delta => $item) {
				$type   = _cmisro_referenceType($item['reference']);
				$getter = '_cmisro_get'.ucfirst($type);

				try {
					$element[$delta] = [
						'#markup' => theme("cmisro_$type", [$type => $getter($item['reference'])])
					];
				}
				catch (Exception $e) {
					// The item references should have already been checked when the user
					// originally saved them in the content.
					// If there's a problem with one of them at display-time,
					// we can just ignore it.
				}
 			}
		break;
	}
	return $element;
}

function cmisro_theme($existing, $type, $theme, $path)
{
	return [
		'cmisro_folder' => [
			'variables' => ['folder' => null],
			'template'  => 'cmisro-list',
			'path'      => drupal_get_path('module', 'cmisro') . '/templates',
		],
		'cmisro_object' => [
			'variables' => ['CMISObject' => null],
			'template'  => 'cmisro-item',
			'path'      => drupal_get_path('module', 'cmisro') . '/templates'
		],
		'cmisro_query' => [
			'variables' => ['query' => null],
			'template'  => 'cmisro-list',
			'path'      => drupal_get_path('module', 'cmisro') . '/templates'
		]
	];
}

/**
 * @return CMISService
 */
function _cmisro_service()
{
	static $service;
	if (!$service) {
		$service = new CMISService(
			variable_get('cmisro_url'),
			variable_get('cmisro_username'),
			variable_get('cmisro_password'),
			variable_get('cmisro_repositoryId')
		);
		$service->succinct = true;
	}
	return $service;
}

/**
 * Determines what kind of reference the user is wanting to make
 *
 * Users can reference a folder, an object, or provide a raw CMIS query.
 * This function determines what kind of reference the user is making
 * by looking at the string they provided
 *
 * folder: /Sites/bloomington-arts-commission/documentLibrary/Agendas
 * query:  select id from cmis:document where ...
 * object: 753026c2-1d1e-40df-bf5b-847f5d23c1df
 *
 * @param string $reference
 * @return string
 */
function _cmisro_referenceType($reference)
{
	if (substr($reference, 0, 1) == '/') {
		return 'folder';
	}
	elseif (substr($reference, 0, 6) == 'select') {
		return 'query';
	}
	else {
		return 'object';
	}
}

/**
 * @return array
 */
function _cmisro_getFolder($path, $documents_only=true)
{
	static $ignore = ['.DS_Store'];

	$output = [];
	$list = _cmisro_service()->getChildrenByPath($path);
	foreach ($list->objects as $item) {
		$p = &$item->object->succinctProperties;

		if ($documents_only && $p->{'cmis:baseTypeId'} == 'cmis:folder') { continue; }

		// Alfresco likes to put versionNumbers into the objectId, instead of
		// only declaring a cmis:versionSeriesId
		$id = !empty($p->{'cmis:versionSeriesId'})
			? $p->{'cmis:versionSeriesId'}
			: $p->{'cmis:objectId'};

		$type = isset($p->{'cmis:contentStreamMimeType'})
			? $p->{'cmis:contentStreamMimeType'}
			: $p->{'cmis:baseTypeId'};

		if (   isset($p->{'cm:title'}[0])) {
			$title = $p->{'cm:title'}[0];
		}
		else {
			$title =  $p->{'cmis:name'};
		}
		if (in_array($title, $ignore)) { continue; }

		$title = check_plain($title);
		$output[] = ['type'=>$type, 'title'=>$title, 'id'=>$id];
	}
	return $output;
}
function _cmisro_getObject($id)    { return _cmisro_service()->getObject($id); }
function _cmisro_getQuery ($query) { return _cmisro_service()->query($query); }

/**
 * Returns the FontAwesome class to use for a given cmis:type
 *
 * @return string
 */
function _cmisro_class_for_type($type) {
	static $lookup = [
		'cmis:folder'=>'fa fa-folder',
		'application/octet-stream' => 'fa fa-file',
		'image/png' => 'fa fa-image',
		'image/jpg' => 'fa fa-image'
	];
	return array_key_exists($type, $lookup) ? $lookup[$type] : $type;
}

/**
 * Streams the document file to the browser
 *
 * @param string $objectId The CMIS object ID
 */
function _cmisro_download($objectId=null)
{
	if ($objectId) {
		$o = _cmisro_getObject($objectId);

		drupal_add_http_header('Cache-Control', 'no-cache, must-revalidate');
		drupal_add_http_header('Content-Type',   $o->get('cmis:contentStreamMimeType'));
		drupal_add_http_header('Content-Length', $o->get('cmis:contentStreamLength'));
		drupal_add_http_header('Content-Disposition', 'attachment; filename="'. $o->get('cmis:name') .'"');
		echo _cmisro_service()->getContentStream($objectId);
		exit();
	}
}
